モジュールの仕様書
===============================================================================

スクリプト内で読み込んで使用できる関数群。
ワークスペース名は、"@ppmdev/modules"となる。

import default from '@ppmdev/modules/module.ts'
import {method} from '@ppmdev/modules/module.ts'
import type {type} from '@ppmdev/modules/types.ts'

のようにして読み込む。

===============================================================================
モジュールの説明

	types.ts	型情報

	ppx.ts		PPxオブジェクトの代替関数を提供
		ppmで必要な関数とプロパティをテスト用の簡易な処理に置き換える
		PPbに処理を代行させているため、環境変数"PPX_DIR"にPPxの
		インストールディレクトリを登録しておく必要がある
		使い方は、jestのテストコードの先頭(他モジュールより前)で読み込み、
		"Grobal.PPx=Object.create(PPx)"を代入してグローバル変数をハックする
		※現在、PPx.ArgumentsおよびPPx.CreateObjectは正しく動作しません

	ansi.ts		ansiエスケープシーケンスの制御関数

	argument.ts	PPx.Argumentの戻り値に関する関数

	data.ts		ppm全体で使用する定数

	debug.ts	debug用の関数
			実装用のコードでは除外される

	echo.ts		色付きechoに関連する関数

	event.ts	ユーザー定義イベントに関する関数

	filesystem.ts	FileSystemObjectに関する関数

	git.ts		git関連の関数

	guard.ts	型ガード関数

	io.ts		読み書きに関する関数

	meta.ts		文字列のメタ変換

	path.ts		パスを制御するための関数

	ppcust.ts	PPcustのヘルパー関数

	ppm.ts		PPxオブジェクトのヘルパー関数

	permission.ts	プラグインの動作条件を確認する関数

	run.ts		*runコマンドのヘルパー関数

	source.ts	S_ppm#sourcesを操作する関数

	staymode.ts	PPx.StayModeに関する関数

	util.ts		ヘルパー関数

	window.ts	アプリケーションウィンドウの制御関数

===============================================================================
types.ts 型のエクスポートのみ

NlCodes		'\r\n' | '\r' | '\n'
NlTypes		'crlf' | 'cr' | 'lf'
AnsiColors 'black'|'red'|'green'|'yellow'|'blue'|'magenta'|'cyan'|'white'|'def'
FileEncode	'sjis' | 'utf16le' | 'utf8'
ErrorLevel	number
Error_String	[boolean, string]
Error_Data	[true, string] | [false, string[]]
Level_String	[number, string]
Letters		LowerLetters | UpperLetters
LowerLetters	[a-z]
UpperLetters	[A-Z]
ScriptEngine	'JScript' | 'ClearScriptV8' | 'QuickJS'
AutoEvent	'FIRSTEVENT' | 'CLOSEEVENT' | 'LOADEVENT' | 'ACTIVEEVENT' | 'SELECTEVENT' | 'RANGEEVENT' | 'COMMENTEVENT'
HighlightNumber	ZeroTo<7>
Mutable<T extends {}>	オブジェクトの全プロパティからreadonlyを省いた型
Flatten<T extends string|string[]>	配列の要素を並べたunion型
ZeroTo<T extends number>	0からTまでの数字を並べたunion型

===============================================================================
ansi.ts

colors
	.fg: AnsiColors
		色名を文字色番号に変換して返す

	.bg: AnsiColors
		色名を背景色番号に変換して返す

colorlize(
	{message: string, esc?: boolean, fg?: AnsiColors, bg?: AnsiColors}
	) => string
	引数にはオブジェクトを渡す
	<message>を指定したフォーマットの文字列に置き換えて返す
	<esc>が true なら<message>内の"%"をエスケープ("%%")する

type Direction = 'u' | 'd' | 'l' | 'r'
cursorMove(direction: Direction = 'u', count: number, esc: boolean = false)
	=> string
	<direction>方向に向けて、<count>行ぶんカーソルを移動する
	<esc>が true なら<message>内の"%"をエスケープ("%%")する

clearLine(esc: boolean = false) => string
	カーソル行全体を消去する
	<esc>が true なら<message>内の"%"をエスケープ("%%")する

===============================================================================
argument.ts

type ArgTypes = string | number | boolean | undefined | null;

hasArg(value: string) => boolean
	第一引数が<value>なら true を返す

validArgs() => string[]
	PPx.Argumentを配列にして返す

safeArgs<T extends ArgTypes[]>(...arr: T) => ArgTypes[]
	PPx.Argumentに初期値を設定し、型を付けて返す
	<arr>は配列で、arr[n]はPPx.Argument(n)に対応する
	戻り値は、PPx.Argument(n)をarr[n]の型に変換した配列
	PPx.Argument(n)が、undefinedか""(空文字)のとき、arr[n]を返す
	arr[n]に設定された ""(空文字) は、string型と認識される
	arr[n]に設定された undefined は、string|undefined型と認識される

===============================================================================
data.ts

info
	.ppmName: 'ppx-plugin-manager'
		ppmのプラグイン名

	.ppmVersion: number
		ppmのバージョン
		※XX.YY.ZZのZZ(パッチ)は参照しない

	.language: 'ja'
		メッセージの言語

	.encode: 'utf16le'
		デフォルトファイルエンコーディング

	.nlcode: '\r\n'
		デフォルト改行コード

	.nltype: 'crlf'
		デフォルト改行コードの種類

	.ppmID: 'P'
		ppmが標準で使用するPPxのID
	.ppmSubID: 'Q'
		PPx[ppmID]の補助に使用するPPxのID

useLanguage() => 'en' | 'ja'
	ppmに設定されている使用言語を返す

mandatory
	ppxVersion: number
		必要とするPPxのバージョン

	codeType: number
		必要とするPPxのタイプ(MultiByte,Unicode)

	scriptType: number
		必要とするスクリプトライブラリ

	scriptModule() => numer
		必要とするScriptモジュールのバージョン

	modules: string[]
		必要とするPPxモジュール

	executables: string[]
		必要とする実行ファイル

uniqName
	.initialCfg: string
		ppmインストール直前にPPxの設定を書き出すファイル名

	.globalCfg: string
		ppm設定値のバックアップファイルのファイル名

	.nopluginCfg: string
		プラグイン設定を除外したPPx設定情報のファイル名

	.pluginList: string
		プラグイン導入リストのファイル名

	.manageFiles: string
		ppm外の設定ファイルリストのファイル名

	.updateLog: string
		*ppmUpdateのリザルトのファイル名

	.repoDir: string
		ppmプラグインリポジトリを保存するディレクトリ名

	.archDir: string
		ppm経由でダウンロードされた書庫を保存するディレクトリ名

	.cacheDir() => string
		ppmが使用するファイル類を保存するディレクトリ名

uniqID
	.tempKey: string
		ppmが一時登録するキー設定のテーブル名

	.tempMenu: string
		ppmが一時登録するメニュー設定のテーブル名

	@deprecated
	.lfDset: string
		ppmが生成したリストファイルのメタ情報を一時保存する
		_UserテーブルのID名

	.virtualEntry: string
		ppmが生成した仮想エントリリストで使用するID名

stayModeID
	.storeData: number
		予約。現在未使用。
	.veHandler: number
		仮想エントリの裏で動作するタスクランナー
	.setsel: number
		正規表現で指定した文字列を選択する
	.stackPPb: number
		PPbの同時実行をサポートする

tmp()
	.dir: string
		PPxがid別に使用する一時ディレクトリパス

	.file: string
		ppmが使用する一時ファイルパス

	.lf: string
		ppmが使用する一時リストファイルパス

	.stdout: string
		標準出力を書き出す一時ファイルパス

	.stderr: string
		標準エラーを書き出す一時ファイルパス

	.ppmDir() => string
		ppmが使用する一時ファイルを作成するディレクトリ名
		ディレクトリがない場合は作成される
uri
	github: string
	rawGithub: string

===============================================================================
debug.ts

debug (default)
	.log(...args: any[]) => void
		"[呼び出し回数] <message>"をダイアログに表示する
		キャンセルするとスクリプトの実行を終了する

	.break() => void
		PPx.Quit(-1)を実行する

	.exists(path: string, att: 'file'|'dir' = 'file') => boolean
		パスが存在するか確認する

	.wait(ms: string) => void
		ミリ秒間待機する

	.func(callback: Function) => void
		デバッグ時に呼び出される関数

	.jestRun() => boolean
		jestの実行中は true を返す

===============================================================================
echo.ts

echoExe
	S_ppm#global:gitが設定されていれば"<git>\\usr\\bin\\echo.exe"を、
	設定されていなければ"echo"を返す

coloredEcho(ppbid: string, message: string, wait: boolean) => ErrorLevel
	echoExeを経由して、PPb上に色付きメッセージを出力する
	<wait>が true なら、%OWを設定する

===============================================================================
event.ts

userEvent
	.set(subid: string, cmdline: string) => void
		S_ppm#event:<subid>=<cmdline>を設定する

	.unset(subid: string) => void
		S_ppm#event:<subid>を削除する

	.do(subid: string) => void
		S_ppm#event:<subid>を実行する

	.once(subid: string) => void
		S_ppm#event:<subid>を実行後、削除する

onceEvent(subid: string, cmdline: string): () => void
	S_ppm#event:<subid>=<cmdline>を設定し関数を返す
	返された関数を実行するとS_ppm#:event:<subid>が実行され、
	その後テーブルから<subid>を削除する

===============================================================================
filesystem.ts

default: fso

createTextFile
 (path: string, overwrite: boolean = true, unicode: boolean = false) => Error_String
	fso.createTextFileと同じ。エラー発生時に終了せずに
	[error: boolean, "<error message>"]を返す

copyFile
 (source: string, destination: string, overwite: boolean = true) => Error_String
	fso.copyFileと同じ。エラー発生時に終了せずに
	[error: boolean, "<error message>"]を返す

copyFolder
 (source: string, destination: string, overwite: boolean = true) => Error_String
	fso.copyFolderと同じ。エラー発生時に終了せずに
	[error: boolean, "<error message>"]を返す

===============================================================================
git.ts

type gitCmd = {
  subcmd: string;
  wd?: string;
  noquotepath?: boolean;
  noeditor?: boolean;
  config?: string;
  opts?: string;
};

gitCmd({ ... }: gitCmd) => string
	`git -C "<wd>"
		-c core.quotepath=<noquotepath>
		-c core.editor=<noeditor>
		-c <config>
		<subcmd> <opts>`
	を調整して返す
	<subcmd>の指定がなければエラー

repoRoot(path: string = '') => string
	<path>(指定がなければPPx.scriptName)がgitリポジトリ下にあれば、
	ルートパスを返し、違えば空文字を返す

branchName(path: string): string[]
	["<ブランチ名>", "<デタッチ状態>"]を返す
	<path>が存在しないときは、["", ""]を返す

branchHead(path: string = '') => Error_String
	<path>.git/HEADからHEADコミットハッシュを読み取って返す
	戻り値は、[error: boolean, data: string]
	<error>が true のとき、<data>にはエラーメッセージが入る

===============================================================================
guard.ts

isInteger(value: unknown): value is number => boolean
	<value>が"整数"なら<value>はnumber型

isString(value:unknown): value is string => boolean
	<value>が"文字列"なら<value>はstring型

isBottom(value:unknown): value is undefined|null => boolean
	<value>がnullかundefinedなら<value>はundefined|null型

isZero(value: string|number|undefined) => value is 0|'0'
	<value>が 0 か "0" なら<value>は0|'0'型

@deprecated
isNonZero(value: string|number) => boolean
	<value>が 0 か "0" または ""(空文字) 以外なら true を返す

isEmptyStr(value: string) => boolean
	<value>が空文字なら true を返す

isEmptyObj(value: Record<string,unknown>) => boolean
	<value>が {}, null のいずれかなら true を返す

isError(error: boolean, value: unknown): value is string => string
	<error>が true なら<value>はstring型
	io.tsのreadLines()のように戻り値が
	["実行結果"(boolean), "エラーメッセージ"(string)|必要とする型(any)]
	になる場合に、string型をブロックするために利用する
	readLines()はconstで宣言した場合にはこの型ガードを必要としないが、
	letで宣言した場合には必要になる場合がある

withinRange<T extends number>(n: number, max: T): n is ZeroTo<T> => boolean
	<n>が0以上<max>以下のときに、<n>は0から<max>までの整数を並べたunion型

===============================================================================
io.ts

confirmFileEncoding(encspec: string) => FileEncode
	<encspec>がFileEncode型かどうか確認し、違う場合は 'utf16le' を返す

read({path: string, enc?: FileEncode = 'utf8'}) => Error_String
	<path>で指定されたファイルの内容を<enc>で読み取って返す
	戻り値は、[error: boolean, data: string]
	<error>が true のとき、<data>にはエラーメッセージが入る

readLines({path: string, enc?: FileEncode = 'utf8', linefeed?: NlCodes})
	=> [true, string] | [false, {lines: string[], nl: NlCodes} ]
	<path>で指定されたファイルの内容を<enc>で読み取り、<nl>で改行して返す
	<nl>の指定がない場合は頭から1000文字の最初に使われた改行コードで区切る
	1000文字内に改行がなかったときは"\n"で区切られる
	戻り値は、[error: boolean, data: string|{lines: string[], nl: NlCodes}]
	<error>が true のとき、<data>にはエラーメッセージが入る

writeLines({
	path: string;
	data: string[];
	enc?: FileEncode = 'utf8',
	append?: boolean = false;
	overwrite?: boolean = false;
	linefeed?: NlCodes = info.nlcode;
	=> Error_String
	<data>を<linefeed>で区切り、指定された<path>に<enc>形式で書き込む
	<append>が true なら追記、<overwrite>が true なら上書きする
	<path>が存在しない場合は新規作成する
	戻り値は、[error: boolean, data: string]
	<error>が true のとき、<data>にはエラーメッセージが入る

stdout({cmd: string, enc?: FileEncode = 'utf8', wd?: string}) => Level_String
	<cmd>を実行し、標準出力を一時ファイルに書き出し、<enc>で読み取って返す
	戻り値は、[ErrorLevel, stdout]
	<ErrorLevel>が0以外のとき、<stdout>にはエラーメッセージが入る

===============================================================================
meta.ts

entryAttribute
	ファイル属性値のリスト

newline
	.TypeToCode
		改行種類("crlf","cr","lf")を改行コード("\r\n","\r","\n")へ変換

	.CodeToType
		改行コード("\r\n","\r","\n")を改行種類("crlf","cr","lf")へ変換

	.Ppx
		改行種類or改行コードを("%%bn","%%br","%%bl")へ変換

	.Ascii
		改行種類or改行コードを("-1","13","10")へ変換

type Histories = "g"|"p"|"v"|"n"|"m"|"s"|"h"|"d"|"c"|"f"|"u"|"x"
type RefHistories = "general"|"PPcRef"|"PPvRef"|"number"|"mask"|"search"|"command"|"directory"|"file"|"path"|"user1"|"user2"
refHistory = {[RefHistories[number]]: Histories[number]}
	PPx参照履歴のリスト

rgxEscape
	.add
		文字に正規表現エスケープを加える

	.exclude
		文字から正規表現エスケープを除去する

type Encodes = (typeof fileEnc)[number]
fileEnc = [
  'sjis', 'euc', 'utf8', 'utf8bom', 'unicode', 'utf16', 'unicodeb', 'utf16be', 'unicodebom', 'unicodebbom',
  'ibm', 'us', 'ansi', 'latin1', 'system'
]
	PPxで指定できるファイルエンコーディングの配列

ppvMediaType = {[Key in <extention>]: 'dir'|'hex'|'image'|'doc'|'link'|'ppx'}
	<extention>(:EXT)に対応するPPvのファイル判別

===============================================================================
path.ts

	pathSelf() => {scriptName: string, parentDir: string}
		現在実行されているスクリプト名とその親ディレクトリを返す

	pathJoin(...args: (string|number)[]) => string
		引数で渡されたパスを"\"で区切って返す

	pathNormalize(path: string, sep: string) => string
		引数で渡されたパスを<sep>で区切って返す

	actualPaths() => string[]
		カーソル(マーク)パスの実体パスを返す
		リンクから実体パスに変換するとき短い名前に変換される場合がある

	actualParentDirectory() => string
		常にファイルシステムのディレクトリパスを返す
		パスが存在するかどうかは問わない

	extractFileName(path: string, sep? = '\\') => string
		<path>のファイル名部分を返す
		<sep>にはパス区切りを指定する

===============================================================================
ppcust.ts

createBackup({
	path: string,
	comment?: boolean,
	discover?: boolean,
	mask?: string[],
	}) => ErrorLevel
	<path>がパス区切りを含めばフルパスとして、含まなければ
	ppm\cache\xxx\backup\<path>にPPx設定ファイルを書き出す

===============================================================================
ppm.ts

戻り値の形式が統一されていないが、基本的に
	確認ダイアログは、boolean
	値があるものは、string
	値がないものは、void
	.getXXXは、[ErrorLevel, string]
	.setXXXは、ErrorLevel
.jobstart()は特殊で、関数.jobendを返す

msgBox(title: string, message) => boolean
	ppmオブジェクトは大きいのでppm.echoだけ使いたいときにはこちらを使う。

ppm
	.echo(title: string, message: string, exitcode?: number) => boolean
		PPx.Execute(`%"ppm/${<title>}" %OC %I"${<message>}(${<exitcode>})"`);
		正常終了なら true を返す

	.question(title: string, message: string) => boolean
		PPx.Execute(`%"ppm/${title}" %OC %Q"${message}"`);
		正常終了なら true を返す

	.choice(
		ppxid: string,
		title: string,
		message: string,
		type = ChoiceType = 'ynC',
		yes?: string,
		no?: string,
		cancel?: string
		) => 'cancel'|'yes'|'no'
		PPx.Execute('%*choice(options)')を実行し、選択された結果を返す
		yes,no,cancelを指定すると、それぞれのボタンの文字が変更される
		<ppxid>にPPb(*option terminal)を指定したとき、"ync"以外の
		ショートカットキーは認識されない

	.execute(id: string, command: string, wait: boolean = false) => ErrorLevel
		<id>が"."なら、"<command>"を
		"tray"なら、"*pptray -c <command>"を
		それ以外で<wait>が true なら、"%*extract(<id>,"<command>%%:0")"を
		"false"なら、"*execute <id>,<command>"を実行する
		idが"."以外のときは"%"のエスケープが必要
		commandに空文字を渡すとエラー
		戻り値は終了コード
		(削除予定)変数"ppm_test_run"が、"2"のとき、
		`*execute B,*linemessage %%bx1b[2F[Execute] <id>,%(<command>%)`
		に変更される

	.execSync(ppbid: string, command: string) => ErrorLevel
		PPb[<ppbid>]上で<command>を実行して結果を待つ
		"%"のエスケープが必要
		commandに空文字を渡すとエラー
		戻り値は終了コード
		(削除予定)変数"ppm_test_run"が、"2"のとき、
		`*execute B,*linemessage %%bx1b[2F[Execute] <id>,%(<command>%)`
		に変更される

	.extract(id: string, value: string) => Level_String
		idが"."なら、'<value>'の
		それ以外なら、'%*extract(<id>,"<value>")'の値を返す
		valueに空文字を渡すとエラー
		PPx.Extract()とは戻り値の形式が異なることに注意

	.lang() => 'en'|'ja'
		"S_ppm#global:lang"を返す。空なら'ja'を返す

	.global(subid: string) => string
		S_ppm#global:<subid>の値を返す
		一度取得した値はそのスクリプト内でキャッシュされる

	.user(subid: string) => string
		S_ppm#user:<subid>の値を返す
		<subid>内の"%"は展開される

	.setuser(subid: string, value: string) => ErrorLevel
		S_ppm#user:<subid>に<value>を登録する
		<value>が空文字ならエラー

	.getpath(format: string, filename: string, path: string = '') => Level_String
		'%*name(<format>,"<filename>",<pathspec>)'の値を返す
		formatに対象外の文字を渡すか、filenameが空文字ならエラー

	.getcust(prop: string) => Level_String
		<prop>の値を返す
		プロパティ(KC_,E_とか)以外を渡すとエラー

	.setcust(prop: string, multiline: boolean = false) => ErrorLevel
		'*setcust <prop>'を実行する
		@filepath、プロパティ(KC_,E_とか)以外を渡すとエラー
		<multiline>が true なら、頭に'%OC 'を追加する
		複数行のマクロを登録する例
			ppm.setcust('KC_main:A,1st line%bn%bt2nd line', true)

	.deletecust(id: string, subid?: string|number|false, load?) => ErrorLevel
		'*deletecust <id>,<subid>'を実行し、
		<load>が true なら、'%K"loadcust"'を実行する

	.setkey(subid: string, value: string, multiline: boolean = false, desc: string) => uniqName.tempKey
		'*setcust <uniqName.tempKey>:<subid>,<value>'を実行する
		<multiline>が true なら、頭に'%OC 'を追加する
		<desc>が空でなければ1行目に'*skip <desc>%bn%bt'を追加する

	.deletemenu() => void
		'*deletecust "<uniqName.tempMenu>"'を実行する

	.deletekeys() => void
		'*deletecust "<uniqName.tempKey>"'を実行する

	.linecust({
	  label: string,
	  id: string,
	  sep: string,
	  value: string = '',
	  esc?: boolean,
	  once?: boolean
	}) => void
		引数にはオブジェクトを渡す
		`*linecust <label>,<id><sep><value>`を実行する
		<esc>が true なら<value>は"%(%)"で括られる
		<once>が true なら<value>の前に`*linecust <label>,<id>,%%:`
		を追加する

	.getvalue(
		id: string, type: '[g]c'|'[g]i'|'[g]p'|'[g]u', key: string
		) => Level_String
		idが"."なら、"%s<type>'<key>'"の
		それ以外なら、`%*extract(<id>,"%%s<type>'<key>'")`の値を返す
		typeはc, i, p, uのいずれかで、oは意味がないので除外
		keyに空文字を渡すとエラー

	.setvalue(
		id: string, type: 'c'|'i'|'p'|'u', key: string, value: string
		) => ErrorLevel
		idが"."なら、'*string <type>,<key>=<value>'の
		それ以外なら、'*execute <id>,*string <type>,<key>=<value>'
		を実行する
		keyに空文字を渡すとエラー

	.getinput({
		message = '',
		title = '',
		mode = 'g',
		select = 'a',
		multi = false,
		leavecancel = false,
		forpath = false,
		fordijit = false,
		k = '',
		autoselect = false
		}) => Level_String
		引数にはオブジェクトを渡す
		modeにダイアログ種類、ヒストリ種類以外の文字を渡すとエラー
		autoselectが true ならENTERキー押下時に最初の補完候補を選択状態にする
		入力終了時に、uniqID.tempKeyとuniqID.tempMenuを削除する
		戻り値は、[ErrorLevel, '入力した文字列']

	.linemessage(
		ppxid: string, message: string|string[], status?: boolean, multi?: boolean
		) => void
		メッセージをログ窓に表示する。<status>が true ならステータス行に
		表示する
		<message>が配列かつ、<multi>が true のとき複数行表示になる

	.report(message: string|string[]) => void
		メッセージをログ窓、なければダイアログに表示する

	.close(ppxid: string) => void
		*closeppx <ppxid>を実行する

	.jobstart(ppxid: string) => Function
		`PPx.Execute('*execute <ppxid>,*job start')`を実行し、
		戻り値に`() => PPx.Execute('*execute <ppxid>,job end')`を返す

	.getVersion(path: string) => string | void
		リポジトリの"package.json"から"version"を読み取って返す
		読み取れなかった場合は"void"を返す

===============================================================================
permission.ts

permission

	.pluginVersion(limit: number|string, name: string) => Error_String
		プラグイン<name>の更新状態を確認する
		未更新の場合はインストールを中止する
		戻り値は[error: boolean, "<error message>"]

	.ppmVersion(limit: number|string) => Error_String
		プラグインが必要とするppmのバージョン<limit>を確認する
		条件を満たさない場合はインストールを中止する
		戻り値は[error: boolean, "<error message>"]

	.ppxVersion(limit: number|string) => Error_String
		プラグインが必要とするPPx本体のバージョン<limit>を確認する
		条件を満たさない場合はインストールを中止する
		戻り値は[error: boolean, "<error message>"]

	.scriptVersion(limit: string|number) => Error_String
		プラグインが必要とするスクリプトモジュールのバージョン
		対象は、PPXSCR.DLLかPPXCV8.DLL
		条件を満たさない場合はインストールを中止する
		戻り値は[error: boolean, "<error message>"]

	.scriptType(limit: string|number) => Error_String
		プラグインが必要とするスクリプトライブリの制限
		<limit>は0-5まで指定できる。数値の対応は
		0:制限なし, 1:JS9(5.7), 2:JS9(5.8), 3:JS9(ES5), 4:Chakra(ES6), 5:CV8(ESNEXT)
		条件を満たさない場合はインストールを中止する
		戻り値は[error: boolean, "<error message>"]

	.codeType(limit: string|number) => Error_String
		プラグインが必要とするPPx本体のコードタイプ(1:MultiByte, 2:Unicode)
		ppmはMultiByteをサポートしていないため、基本的には2を指定する
		条件を満たさない場合はインストールを中止する
		戻り値は[error: boolean, "<error message>"]

	.libRegexp(limit: string) => Error_String
		ppmが必要とする正規表現ライブラリの名称
		ppmはbregonig.dllの使用を前提としているため
		<limit>が'bregonig'でない場合はインストールを中止する
		戻り値は[error: boolean, "<error message>"]

	.useExecutables(items: string|string[]) => Error_String
		プラグインが必要とする実行ファイル名
		実行ファイルが未インストールの場合はインストールを中止する
		戻り値は[error: boolean, "<error message>"]

	.useModules(items: string|string[]) => Error_String
		プラグインが必要とするライブラリ
		ライブラリが未インストールの場合はインストールを中止する
		戻り値は[error: boolean, "<error message>"]

	.dependencies(items: string) => Error_String
		プラグインと関連のあるプラグインや実行ファイル名を
		インストール実行ログに表示する

===============================================================================
run.ts

type RunOptions = {
  startwith: '' | 'min' | 'max' | 'noactive' | 'bottom';
  wait: '' | 'wait' | 'idle' | 'later' | 'no';
  priority: 'low' | 'belownormal' | 'normal' | 'abovenormal' | 'high' | 'realtime';
  startmsg: boolean,
  breakjob: boolean,
  newgroup: boolean,
  log: boolean;
  wd: string;
  x: number;
  y: number;
  width: number;
  height: number;
};
type PPbOptionsSpec = {
  bootid?: Letters;
  bootmax?: Letters;
  q?: boolean;
  c?: string;
  k?: string;
};
type Description = {
  desc: string;
  fg: colorlize['fg'];
  bg: colorlize['bg'];
};
type Run = Partial<RunOptions> & {cmd: string};
run(
  {startwith = '', wait = '', priority, job, log, wd, x, y, width, height, cmd}: Run
) => boolean
	*runコマンドを実行する
	引数にはオブジェクトを渡す
	戻り値は正常起動なら true 

runPPe({
  wait = false, path = '', encode = 'utf8bom', linefeed = 'crlf', tab = 8,
  title, history, modify, saveenc, savelf, k = ''
}) => void
	*ppeを実行する
	引数にはオブジェクトを渡す
	<wait>が true のとき"*edit"を、false のとき"*ppe"を実行する
	<path>が指定されたとき"-new"オプションが付加される
	<title>は"-k *setcaption <title>"を設定する
	<history>,<modify>,<saveenc>,<savelf>はそれぞれ
	 *editmode <history> -modify:<modify> -<saveenc> -<savelf>に設定される
	<k>は"-k %(*setcaption <title>%:*editmode <options>%:<k>%)のように設定される

type RunPPb = Partial<PPbOptionsSpec> & Partial<RunOptions> & Partial<Description>;
runPPb({
  bootid, bootmax, q, c, k, startwith = '', wait = '', priority, job, log, wd, x, y, width, height, desc, fg, bg
  }: RunPPb
) => boolean
	PPbを*run経由で実行する
	引数にはオブジェクトを渡す
	<startwith>に"bottom"を指定するとPPbのUIを実行元UIより下に配置する
	<desc>には起動時に表示するメッセージを指定する
	<fg>、<bg>は<desc>の文字色と背景白をAnsiColors型で指定する
	戻り値は正常起動なら true 

@deprecated
stdout({cmdline, extract = false, startmsg = false, hide = false}: Stdout)
 => Level_String
 	runStdout()に改名した

type Stdout = {
  cmdline: string;
  wd?: string,
  extract?: boolean;
  startmsg?: boolean,
  hide?: boolean,
  utf8: boolean,
  single: string,
  multi: string[]
};
runStdout({cmdline, wd, extract = false, startmsg = false, hide = false, utf8 = false, trim = false, single, multi}: Stdout)
=> Level_String
	%*runを実行する
	引数にはオブジェクトを渡す
	<extract>に true を指定すると%macroが展開される
	<utf8>は出力の文字コードをutf8に設定する(default:system)
	<trim>出力文字列の両端の空白を削除する
	<single>,<multi>はそれぞれ、単一行、複数行の標準入力を指定できる
	戻り値は[errorlevel, stdout]の配列

===============================================================================
source.ts

type Source	{
	name: string;
	enable: boolean,
	setup: boolean,
	version: string,
	location: 'remote' | 'local';
	path: string;
	branch?: string;
	commit?: string;
	autor?: string;
	};

expandSource(name: string) => Source|undefined
	S_ppm#sources:<name>をオブジェクトとして返す
	<name>が空なら、undefinedを返す

owSource(name: string, items: Partial<Source>) => Source|undefined
	S_ppm#sources:<name>の値を<items>の値で上書きする
	S_ppm#sources:<name>をオブジェクトとして返す
	<name>が空なら、undefinedを返す

setSource({
	name,
	enable = true,
	setup = false,
	version = '0.1.0',
	location = 'remote',
	path,
	branch = '',
	commit = ''
	}: Source) => ErrorLevel
	引数にはオブジェクトを渡す
	引数の内容で、'S_ppm#sources:<name>'に登録する

sourceNames() => string[]
	S_ppm#sourcesに登録されたプラグイン名を抽出して返す

sourceComplistPath
	プラグイン名補完リストのパスを返す

sourceComp
	.expandName(name: string) => string
		プラグイン名から状態表示前置詞(!~)を除いて返す

	.getName(name: string) => string | undefined
		プラグイン名に状態表示前置詞(!~)を加えて返す

	.fix(source: Source) => Error_String
		プラグイン名補完リストに状態表示前置詞(!~)+<source.name>を追加する

	.write(data: string[], add: boolean = false) => Error_String
		プラグイン名補完リストに<data>を上書きする
		<add>が true なら追記する

状態表示前置詞はインストール済みのプラグインの読み込み状態を示す
	!	未設定のプラグイン
	~	無効化されているプラグイン

===============================================================================
staymode.ts
ppmではStayModeのインスタンス番号に80000番台を使用している
予約番号は以下のとおり
	ppm	80000-80099
	ppm-grep	80100-80109
	ppm-rclone	80110-80119
	ppm-view	80120-80129
	ppm-vilikekeys	80130-80139
	ppm-adjacentdir	80140-80149
	ppm-comppath	80150-80169

@deprecated
discardInstance(debounce: string, debug?: string) => void
	atDebounce.holdへと変更

ppx_Discard(debug?: string, info?: string) => void
	atXXX関数を読み込んだときに自動的に設定される
	PPx.StayMode=0を設定しインスタンスを破棄する
	<debug>の値が"DEBUG"のとき、デバッグメッセージを表示する
	<info>にはデバッグメッセージの追加情報を指定する

atDebounce = {
  hold(debounce: string, debug?: string) => void
	非表示状態のPPb上で<debounce>ミリ秒待機したあと
	%sgu'ppmlib'\discardStayMode.jsを実行する
	discardStayMode.jsは<debounce>ミリ秒待機したあと、_User:ppm_staymode<instance>
	をチェックし、値が0ならppx_Discard経由でインスタンスを廃棄し、0以上で
	あれば実行維持状態を<debounce>ミリ秒延期する
	_User:ppm_staymode<instance>は延期するごとに0に更新される
	<debug>の値が"DEBUG"のとき、デバッグメッセージを表示する
	使用例は、実行元のスクリプト内でatDebouncd(<debounce>)を実行し、
	_User:ppm_staymode<instance>=<debouce>を設定する
	<debounce>ミリ秒内にスクリプトが再実行されれば実行維持状態が延期される
	具体的な使用方法はadjacentDirのmoveDirectory.stay.tsを参照
}

type Event = 'ACTIVEEVENT' | 'LOADEVENT';
type KeysTable = 'KC_main'|'KV_main'|'KV_img'|'KV_crt'|'KV_page'|'KB_edit'|'K_ppe'|'K_edit'
type Condition = 'instantly' | 'once' | 'hold';
type DiscardOptions = {table: KeysTable; label: string; mapkey?: string; cond?: Condition; debug?: string};

atActiveEvent = {
  @deprecated
  hold(table: KeysTable, label: string, debug: string) => void
	discardに変更
  discard({table, label, mapkey, cond, debug}: DiscardOptions) => void
	ACTIVEEVNET実行時に実行元の常駐インスタンスを破棄する
	<table>:ACTIVEEVENTにワンショットの*linecust <label>%nを設定する
	<mapkey>にはキーテーブルを指定できる。*mapkey use,<mapkey>を実行し、
	  ACTIVEEVENTに*mapkey delete,<mapkey>を登録する
	<cond>は'instantly'=無条件、'once'=PPxIDが同じ、'hold'=PPxIDが同じ、かつ
	  ディレクトリが異なるときに発動する
	<debug>の値が"DEBUG"のとき、デバッグメッセージを表示する
}

atLoadEvent = {
  @deprecated
  hold(table: KeysTable, label: string, debug: string) => void
	@deprecated
	discardに変更
  discard({table, label, mapkey, cond, debug}: DiscardOptions) => void
	LOADEVENT実行時に実行元の常駐インスタンスを破棄する
	<table>:LOADEVENTにワンショットの*linecust <label>%nを設定する
	<mapkey>にはキーテーブルを指定できる。*mapkey use,<mapkey>を実行し、
	  LOADEVENTに*mapkey delete,<mapkey>を登録する
	<cond>は'instantly'=無条件、'once'=PPxIDが同じ、'hold'=PPxIDが同じ、かつ
	  ディレクトリが異なるときに発動する
	<debug>の値が"DEBUG"のとき、デバッグメッセージを表示する
}

circular = <T>(array: T[]) => {
  get() => T;
	実行するごとに<array>の要素を一つ返す。要素は循環する
  discard({table, label, cond, debug}: DiscardOptions) => void
	<table>:LOADEVENTにワンショットの*linecust <label>%nを設定する
	一行編集上で使用するスクリプトのStayMode解除を想定しており、
	一行編集を閉じた(PPcがアクティブになった)ときにStayModeが解除される
	<mapkey>にはキーテーブルを指定できる。*mapkey use,<mapkey>を実行し、
	  LOADEVENTに*mapkey delete,<mapkey>を登録する
	<cond>は'instantly'=無条件、'once'=PPxIDが同じ、'hold'=PPxIDが同じ、かつ
	  ディレクトリが異なるときに発動する
	<debug>の値が"DEBUG"のとき、デバッグメッセージを表示する
}

===============================================================================
util.ts

expandNlCode(string) => NlCodes
	引数内に含まれる最初の改行コードを返す
	改行が含まれなかったときは'\n'を返す

semver(version: string|number) => string
	引数を5-6桁のバージョン番号に置換して返す
		1.2 => "10200"
		"1.20" => "12000"
		"1.2.3" => "10203"
		"1.2.30.04" => "10230"
		"10.20.30.40" => "102030"

checkUpdate(newversion: string, oldversion: string) => boolean
	<newversion>が<oldVersion>を上回るとき true を返す

type targetValue = unknown
waitUntil(
	value: targetValue,
	callback: (value: targetValue) => boolean,
	timeout: number = 6000(ms),
	interval: number = 300(ms)
	): => boolean
	<interval>ごとに<callback>の成否を確認して true になるまで繰り返す
	<timeout>を過ぎたら"false"を返して終了する

waitMoment(callback: () => boolean) => void
	極短い時間(1秒強)、<callback>が true を返すのを待つ

isCV8() => boolean
	現在使用しているJavaScriptライブラリが"ClearScriptV8"なら true を返す

isQJS() => boolean
	現在使用しているJavaScriptライブラリが"QuickJS"なら true を返す

@deprecated path.tsへ移動
actualParentDirectory() => string
	常にファイルシステムのディレクトリパスを返す
	パスが存在するかどうかは問わない

windowID() => {id: string, uid: string}
	<id>にはPPx.Extract('%n')の値が入る
	<uid>には<id>の値にアンダースコアを追加した値が入る
		{id: 'CA', uid: 'C_A'}
		{id: 'CZaa', uid: 'C_Zaa'}
	※%*ppxlist(-C)はID名に必ずアンダースコアを含むがPPx.windowIDNameは
	値が"CZxx"のときにアンダースコアを含まないため同一IDでも一致しない

codeToChar(v: string) => string
	<v>の値が"x"から始まる文字列なら16進数として、"u"から始まる文字列なら
	数値として、文字コードを文字に置き換える

hexToNum(hex: string) => undefined | number
	16進数を数値に置き換えて返す
	置き換えに失敗したときは undefined を返す

numToHex(num: number) => undefined | string
	数値を16進数に置き換えて返す
	置き換えに失敗したときは undefined を返す

===============================================================================
window.ts

winpos(target: string, x?: number, y?: number) => string
	xとyがNumber型なら`*windowposition <target>,<x>,<y>`を返す
	負数は0に正される
	Number型以外なら空文字を返す

winsize(target: string, width?: number, heithg?: number) => string
	widthとheightがNumber型なら`*windowsize <target>,<width>,<height>を返す
	width, heigthは200が最低値
	Number型以外なら空文字を返す

getDisplaySize() => [width:number, height:number][]
	使用しているディスプレイの幅[横,縦]を取得する

