Parserの仕様書
===============================================================================

PPxの内部情報文字列を解析しオブジェクトに変換する。
ワークスペース名は、"@ppmdev/parsers"となる。

import {Function} from '@ppmdev/parsers/parser.ts'

のようにして読み込む。

===============================================================================
Parserの説明

listfile.ts
	type EntryElements = {
		name: string;
		sname?: string;
		A?: string;
		C?: string;
		L?: string;
		W?: string;
		S?: string;
		R?: string;
		X?: string;
		H?: string;
		M?: string;
		T?: string;
		Partial<Record<string, string>>;
	};

	bitToDate(dwHigh: number, dwLow: number) => Date;
		FILETIME構造体を時刻変換して返す

	dateToBit(...tile: number[]) => {high: number; low: number}
		year, month, day, hour, minute, second をFILETIME構造体に
		変換して返す

	getFiletime(data: string) => string
		時刻を指す文字列をFILETIME構造体に変換し、"<上位32bit>.<下位32bit>"
		の文字列として返す

	formLfData(data: string, rgx: RegExp, rep: string) => string
		<data>.replace(<rgx>,<rep>)を実行し、リストファイルの形式に
		整形して返す

	createLfItems({lines: string[], rgx: RegExp, rep: string})
	=> string[]
		複数の行情報を一行ずつformLfData()に送り、リストファイルの形式の
		行情報を格納した配列として返す

	createLfMeta({
		charset?: string = 'utf-8',
		basepath?: string,
		dirtype?: string = '0',
		opts?: string[]
	}) => string[]
		引数からメタ情報を形成して配列として返す
		<opts>は、一つの要素が一行になる
			ex) {opts: ['Search=XXX', 'option=directory', 'user=1']}

	getLfMeta(lines: string[]): Record<string, string>
		行情報からメタ情報を抽出して配列として返す

	parseLfData(ele: string[]) => EntryElements
		要素ごとに分割されたエントリ情報をオブジェクトに変換して返す

	splitLfData() => (line: string) => string[]
		クロージャ。初回実行時に置換のための情報を内部に格納する
		二度目以降はエントリ情報を要素ごとに分割して配列として返す
		*makelistfile -normal で出力されるCSV情報はカットされる

	getLfLines(lines: string[]) => EntryElements[]
		リストファイルの一行ずつをオブジェクトとして格納した配列を返す

table.ts
	getProps(id: string) => Record<string, {sep: ','|'=', value: string}>
		%*getcustで取得したテーブル情報をオブジェクトとして返す
		<id>がテーブルを持たない場合は"{}"(空のオブジェクト)を返す
