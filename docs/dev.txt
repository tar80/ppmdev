ppmdevの仕様書
===============================================================================

ppmでは、PPxで使用するJavaScriptエンジン間でのコードの互換性を維持するため、
TypeScriptで記述したコードをBabelでES3相当のJavaScriptにトランスパイルし
Rollupでバンドルしている。
トランスパイルは構文解析を主とし、Polyfillの導入は必要最低限にとどめている。
npm workaspace上で実行され、テストにはJestを採用している。

基本的にはESNEXTで記述して必要なものだけユーザー側でPolyfillを用意する。
JScriptでしか使えないオブジェクトは、JavaScriptでも使えるように
考慮してプログラムしなければならない。

また、TypeScript上でPPxオブジェクトを実行することはできないため、PPx側で実行
する際には開発用にトランスパイルしたコードを用いる。

トランスパイルしたコードはUTF-8(BOM)で出力される。

===============================================================================
ワークスペースの仕様

・ワークスペース全体のルートディレクトリは"ppmdev"。スコープ名は"@ppmdev"。
  プラグインのワークスペース名は"@ppmdev/<plugin-name>"となる。

・設定ファイル類は自由に編集してかまわない。
  "tsconfigs"ディレクトリ配下の"base.json"はワークスペース全体のtsconfig.jsonの
  共通設定となる。

・開発するプラグインは"ppmdev/packages/<plugin-name>/"に配置する。
・ソースコードは"ppmdev/packages/<plugin-name>/src/"に配置する。
・ワークスペースへの追加は、ワークスペース全体のルートから
  "npm init --scope ppmdev -w packages/<plugin-name>"を実行し、その後
  プラグイン側のpackage.jsonに_package_merge.jsonをマージする。

・プラグインで使用するnpmパッケージを追加したいときは、プラグインのルート上で
  "npm install -w @ppmdev/<plugin-name> <package-name>"を実行する。

・Jestのテストコードはソースコードのあるディレクトリを基準に、
  "./__test__/**.test.ts"に配置する。
・"@ppmdev/modules/ppx"をimportする場合は環境変数"PPX_DIR"を事前に登録しておく。
  詳細はmodules.txtのppx.tsの項目を参照。
・"@ppmdev/modules/io"は"jest.mock('@ppmdev/modules/io')"でモッキングできる。
  現在CV8,QuickJSでjest.spyOn(PPx,"Execute").mockImplementation()を使うと応答不能になる。
・PPxScriptModuleではexport文を扱えないため、実装用ファイルを出力するときは
  export文をコメントアウトすること。

・標準のnpm scriptは以下になる。
	ts		tsc --noEmit true --skipLibCheck true
	deno		deno run --no-check --allow-all --unstable
	build		ppmbuild
	build:prod	set NODE_ENV=Production&&ppmbuild -- src
	ppmver		ppmversion
	test		jest

	・ts-nodeが遅いので確認用にdenoをセットしている。
	  ts-nodeを使う場合は"npx ts-node"を直接実行する。
	・denoで確認する場合はimport文の拡張子を省略できない。@scopeは使える。

	・"build"は"src"ディレクトリ以下のファイルを一つ指定できる。
	  対象ファイルの指定方法は"src/"からの相対パスとする。なお、
	  "src/"から始まるパスの場合"src/"は無視される。
	  パス区切りは"/"(slash),"\"(backslash)どちらでもかまわない。
	    "npm run build index.ts", "npm run build lib/library.ts"
	    "npm run build src/index.ts", "npm run build src\lib\library.ts"
	・"build:prod"は"src"配下の全スクリプトを対象に"dist"へ出力する。
	・ディレクトリ名"mod/"配下のスクリプトは出力対象外。
	・"_"で始まるエントリ名は出力対象外。
	  "__test__/", "_noOutput.ts"
	・"cv8/"を含むディレクトリパスからは"cv8/"が省かれて出力される。
	  "src/lib/cv8/someLibrary.ts" -> "dist/lib/someLibrary.js"
	・ファイル名末尾に".stay.ts"を含むスクリプトは関数名/^ppx_.+/(正規表現)
	  にマッチするデッドコードを削除しない。(※PPx.StayMode=2で使用する外部
	  呼び出し関数がtree shakingにより削除されないための処置)
	  PPx.StayMode=2による外部呼び出し関数を登録する場合は、関数名を
	  "ppx_<name>"とする必要があり、スクリプトモジュール本体で実装されている
	  メソッド名とのバッティングを避けるため、<ppx_FunctionName>のように
	  キャメルケースを使うなどの対策を取ること。なお、PPx.StayMode=2を使う
	  場合でもデッドコードが含まれない場合は".stay.ts"とする必要はない。

	・"ppmver"は、"./install"と"./package.json"内のバージョン表記を更新する。
	  プロンプトに表示される[current: <version>]は、"./install"があれば
	  origin/main:installを、なければorigin/main:package.jsonを参照する。
	  空文字、現在のバージョンより低い値のときは中止される。

	・"test"をworkaspaceで実行すると、Jest側でエラーを発生させた時にnpmの
	  エラーメッセージも表示されてしまうため"npx jest"を直接実行して回避する。
	・"npx jest"は、workspaceのルートから実行する。
	・単一のファイルに対して実行したいときは、
	  "npx jest --testMatch **/<filename>.test.ts"とする。

・ビルドしたコードは"dev/"以下に開発用、"dist/"以下に実装用が出力される。
・ビルドした開発用コードの先頭に、import文が追加されているときはES3では使えない
  コードが含まれている、または重複した呼び出し元を解決できなかった可能性がある。
・実装用のコードは圧縮される。

・ppmが用意しているModule、Parser、Polyfillを利用できる。

・TypeScriptでは以下の型情報を参照できる。
  Windows-Script-Host, Activex-Scripting, Activex-Adodb, PPx-Script, Jest
・PPx-Scriptの型情報は正しい情報を参照しておらず抜けも多い。
  必要な箇所は書き足して利用できる。

===============================================================================
バージョンの表記規則

プラグインのバージョンは、"メジャー.マイナー.パッチ"の順に記述する
"パッチ"は表記上、省略できるが内部では"00"と解釈される

例)
	1.2 => 10200
	1.2.3 => 10203
	1.20.30 => 12030

===============================================================================
開発環境と新規プラグインのセットアップ

nodejsが必須。

1. "ppmdev"を任意のディレクトリに配置する
2. "ppmdev"に移動し、シェルから"npm install"を実行する
3. "_newproject"ディレクトリを"packages"配下にコピーする
4. "3."でコピーしたディレクトリ名を開発するプラグイン名にリネームする
5. "ppmdev"上で、"npm init --scope ppmdev -w packages/<plugin-name>"を実行する

===============================================================================
スクリプトの記述ルール

JScript.dll,JScript9.dll,chakra.dll,ppxcv8.dll,ppxqjs.dllのすべてで使えない
関数・記述は使わない。若しくはinstallファイルの"SCRIPTTYPE_PERMISSION"で
特定のdllに限定する。

"WScript.CreateObject"、"ActiveXObject"はJScript(9).dll以外では使えない。
代わりにPPx.CreateObjectを使用する。ただし、CreateObjectと完全に同様ではない
ようなので、モジュールのドキュメントを参照し対応状況を確認すること。

PPx.Enumerator関数が用意され、互換性の強化も行われているため、PPx1.97,
ScriptModule21R1,CV8ModuleR3+3,QuickJSModuleT5以降はどのモジュールでも
TypeScriptで互換性を維持できるようになっている。
これに伴いVBScriptで書いていたライブラリスクリプトはTypeScriptで書き直した。
※src/lib/countEntries.ts, getEntries.ts

ppxcv8.dll,ppxqjs.dllではフィールド名を厳密に指定しなければならない。
	PPx.arguments => PPx.Arguments, PPx.entry => PPx.Entry
またライブラリ側で頭文字の大小文字を無視できるように対処されているものもある。
	PPx.Arguments.item(Item), PPx.result(Result)

promiseは使えない。pptray,ppbとTextModuleの*stdout,%*stdin()を使えば簡単な操作
なら非同期実行できる。
動的importは使えない。行頭でimportし、不要なものを読み込まないようモジュール側
で配慮する。

PPx.resultで真偽値を返すとき、ScriptModuleとCV8で値が違ったが、現在は同様の値を
返すように調整されている。

===============================================================================
ディレクトリ構成

ppm用プラグインは以下のファイルから構成される。

	<plugin-name>\	ルートディレクトリはプラグインの名称とする
	 ├─dev\		開発用にトランスパイルしたjsファイルが出力される
	 ├─dist\	実装用にトランスパイルしたjsファイルが出力される
	 ├─doc\
	 │  └─help.txt	プラグインのヘルプ
	 ├─setting\
	 │  ├─base.cfg	プラグイン設定のベースとなるファイル
	 │  └─patch.cfg	ユーザーが変更可能な設定値をまとめたファイル
	 ├─sheet\	ppm\cache\xxx\listにコピーされるリストを配置
	 ├─src\		ソースコード(TypeScript)を配置
	 ├─t\		ppx用のテストスクリプト(JScript)を配置
	 ├─userscript\	ppm\cache\xxx\userscriptにコピーするスクリプトを配置
	 ├─install	ppmプラグインのインストール情報
	 ├─readme.md	プロジェクトの説明書
	 ├─_package_merge.json	初期化後にpackage.jsonとマージする
	 │			npm script と Jest の設定が書かれている
	 └─tsconfig.json	TypeScriptの設定

install
	・必須。プラグインの動作条件を指定できる
	  条件に満たなければインストールを中断する
	・一行目には必ず"PPM_PLUGIN_NAME="を大文字小文字を区別して記述する
	・"VERSION"の表記は"nn.nn.nn"、または"nn.nn"のいずれかになる
	  "1.2"は10200、"1.2.3"は10203と解釈される
	・プラグイン固有のディレクトリを使用する場合は、"SPECIFIC_COPY_DIR="
	  にディレクトリ名を指定すれば、ローカルのcache\xxx\以下にコピーされる。
	  他のプラグインとのディレクトリ名の衝突を避けるためにプラグイン名を
	  ディレクトリ名にするなどの対策をしておく

dase.cfg
	・必須。patch.cfgとマージして生成するプラグイン設定の元になる

patch.cfg
	・必須。デフォルト設定のひな型。プラグインのインストール時に
	  <plugin-name.cfg>としてcache\xxx\configにコピーされる
	・<plugin-name.cfg>は*ppmEditコマンドでユーザーが直接編集でき、
	  base.cfgとマージされる。
	・*ppmSetDefault, *ppmCompareなどに使用される

===============================================================================
base.cfgとpatch.cfgの仕様

・用語
	ID = {
	SubID = 値(value)
	}

	テーブルはID={}の全体を指す
	フィールド・プロパティはSubID=valueの全体を指す

・コメントは行頭のセミコロン(;)のみ認識する
  行中・語尾のセミコロンはコメントと認識されない

・base.cfgとpatch.cfgにはPPxのテーブル情報を書き込める

・base.cfgの仕様
	$replace:<name> = <value>
		patch.cfg内の$<name>の値と$replace:<name>を置換
		patch.cfg内に$<name>が存在しない場合は設定されない
	@default:<name> = <default-value>
		patch.cfg内の@<name>の値と<default-value>を置換
		patch.cfg内に@<name>が存在しない場合は<default-value>を設定
	[?<name>:<default-value>]
		patch.cfg内の?<name>の値と[?<name:<default-value>]を置換
		patch.cfg内に?<name>が存在しない場合は<default-value>と置換

・patch.cfgの仕様
	$<name> = <value>
		<value>の内容でbase.cfg内$replace:<name>を置換
	@<name> = <value>
		<value>の内容でbase.cfg内@default:<name>の<defalut-value>を置換
		行頭に<TAB>を置くことで複数行のコマンドを記述できる
	?<name> = <value>
		<value>の内容でbase.cfg内[?<name>:<defalut-value>]を置換
	[section][endsection]の間はユーザーが自由に設定を記述できる
		・冒頭に"/<name> = <value>"の記述があれば、以降の行内の
		  "[/<name>]"が"<value>"に置換される
		・IDの頭に"-"を付けるとテーブルごと削除する
		・テーブルの削除のみが目的の場合は"-ID ="とする
		  A_xxx,X_xxx,XB_xxx,XC_xxx,XV_xxx,KC_main,KV_mainは削除対象から
		  除外される(除外対象は消すと危険そうなものを適当に選別した)
	[linecust][endlinecust]の間はユーザーが自由に*linecustを記述できる
		・書式は"<label>,<ID[:SubID]><=param|,command>"とする
		・この設定値は、設定ファイルのマージと同時にPPxに登録される
		・アンインストール情報を%sgu'ppmcache'\ppm\unset\linecust.cfgに
		  出力する
	[execute][endexecute]の間はユーザーが自由にコマンドを記述できる
		・コマンドは一行ずつ順番に実行されるため、一つのコマンドは
		  一行に収めなければならない
		・ここに記述されるコマンドはプラグイン設定時に即実行される
		・アンインストール情報を残さない

===============================================================================
サンプル設定

【base.cfg】
	KC_main = {
	@default:A , %K"@A"
	@default:B , %K"@B"
	$replace:key1 , *linemessage [?msg:message1]
	$replace:key2 , *linemessage [?msg:message2]
	$replace:key3 , *linemessage [?msg:message3]
	}

【patch.cfg】
	@A = %K"@R"
	$key1 = C
	$key2 = D
	;$key3 = E
	?msg = patch1

	[section]
	/s = sample
	KC_main = {
	E , *ppe
	}

	-S_[/s] = {
	[/s]1 = [/s]1
	[/s]2 = %0
	[/s]3 = echo [/s]3
	}
	[endsection]

	[linecust]
	sample,KC_main:Firstevent,*set sample_flag=1
	[endlinecust]

	[execute]
	*string p,plugin_setup=1
	[endexecute]

上記の設定ファイルをマージすると、%sp"plugin_setup"が"1"に設定され
下記の内容の設定ファイルが生成される

【cache\ppm\setup\plugin-name.cfg】
	KC_main = {
	A , %K"@R"
	B , %K"@B"
	C , *linemessage patch1
	D , *linemessage patch1
	E , *ppe
	FIRSTEVENT , ~
		%msample *set sample_flag=1
	}
	S_sample = {
	sample1 = sample1
	sample2 = %0
	sample3 = echo sample3
	}

【cache\ppm\unset\plugin-name.cfg】
	KC_main = {
	-|A =
	-|B =
	-|C =
	-|D =
	-|E =
	}
	-|S_sample =

【cache\ppm\unset\linecust.cfg】
	plugin-name=sample,KC_main:FIRSTEVENT,

===============================================================================
